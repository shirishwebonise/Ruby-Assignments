var search_data = {"index":{"searchIndex":["collection","collectionmanager","list","queue","stack","add()","all()","delete()","find()","new()","new()","new()","new()","new()","pop()","push()","push()","remove()","to_s()","to_s()","readme","rakefile","collection_manager.gemspec"],"longSearchIndex":["collection","collectionmanager","list","queue","stack","collectionmanager#add()","collectionmanager#all()","collectionmanager#delete()","collectionmanager#find()","collection::new()","collectionmanager::new()","list::new()","queue::new()","stack::new()","stack#pop()","queue#push()","stack#push()","queue#remove()","queue#to_s()","stack#to_s()","","",""],"info":[["Collection","","Collection.html","",""],["CollectionManager","","CollectionManager.html","","<p>Collection Manager Class to manage collections\n"],["List","","List.html","",""],["Queue","","Queue.html","",""],["Stack","","Stack.html","","<p>Stack class implementing a typical stack data structure\n"],["add","CollectionManager","CollectionManager.html#method-i-add","(collection)","<p>Adds a new collection to the Hash object\n<p>Example:\n\n<pre>&gt;&gt; cm = CollectionManager.new\n&gt;&gt; cm.add(Stack.new)</pre>\n"],["all","CollectionManager","CollectionManager.html#method-i-all","()","<p>Returns all the collections\n"],["delete","CollectionManager","CollectionManager.html#method-i-delete","(id)","<p>Deletes a collection from the Hash object\n<p>Example:\n\n<pre>&gt;&gt; cm.delete(1)</pre>\n"],["find","CollectionManager","CollectionManager.html#method-i-find","(id)","<p>Returns a collection form the Hash id with key as id\n<p>Example:\n\n<pre>&gt;&gt; cm.find(1)\n=&gt; value at key 1 in the Hash ...</pre>\n"],["new","Collection","Collection.html#method-c-new","()",""],["new","CollectionManager","CollectionManager.html#method-c-new","()",""],["new","List","List.html#method-c-new","()",""],["new","Queue","Queue.html#method-c-new","(size = nil)",""],["new","Stack","Stack.html#method-c-new","(size = nil)",""],["pop","Stack","Stack.html#method-i-pop","()","<p>This method implements pop functionality of a stack\n<p>Example:\n\n<pre>&gt;&gt; s = Stack.new\n&gt;&gt; s.push(&quot;something&quot;)\n&gt;&gt; ...</pre>\n"],["push","Queue","Queue.html#method-i-push","(object)",""],["push","Stack","Stack.html#method-i-push","(object)","<p>This method implements push functionality of a stack\n<p>Example:\n\n<pre>&gt;&gt; s = Stack.new\n&gt;&gt; s.push(&quot;something&quot;)\n&gt;&gt; ...</pre>\n"],["remove","Queue","Queue.html#method-i-remove","()",""],["to_s","Queue","Queue.html#method-i-to_s","()",""],["to_s","Stack","Stack.html#method-i-to_s","()",""],["README","","README_md.html","",""],["Rakefile","","Rakefile.html","",""],["collection_manager.gemspec","","collection_manager_gemspec.html","","<p>Gem::Specification.new do |s|\n\n<pre>s.name        = &#39;collection_manager&#39;\ns.version     = &#39;0.0.1&#39;\ns.date     ...</pre>\n"]]}}